{
  "env": {
    "browser": true,
    "es2021": true
  },
  "extends": [
    "eslint:recommended",
    "plugin:react/recommended",
    "plugin:@typescript-eslint/recommended",
    "plugin:react-hooks/recommended",
    "next/core-web-vitals",
    "plugin:@next/next/recommended" // Next.js specific recommendations
  ],
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "ecmaFeatures": {
      "jsx": true
    },
    "ecmaVersion": 12,
    "sourceType": "module",
    "project": "./tsconfig.json"
  },
  "plugins": [
    "react",
    "@typescript-eslint",
    "react-hooks",
    "jsx-a11y" // Accessibility linting
  ],
  "rules": {
    /* Typescript-specific rules */
    "@typescript-eslint/no-unused-vars": [
      "error",
      { "argsIgnorePattern": "^_" }
    ], // Ignore unused args starting with _
    "@typescript-eslint/explicit-module-boundary-types": "off", // No need for explicit return types in functions
    "@typescript-eslint/no-explicit-any": "error", // Avoid the use of `any` type
    "@typescript-eslint/consistent-type-definitions": ["error", "interface"], // Enforce using interfaces over types
    "@typescript-eslint/no-inferrable-types": "warn", // Avoid explicit types that can be inferred

    /* React-specific rules */
    "react/react-in-jsx-scope": "off", // Not required in Next.js
    "react/prop-types": "off", // Disabled as you're using TypeScript for type checking
    "react/jsx-key": "error", // Ensure unique keys in lists
    "react/jsx-no-target-blank": "error", // Prevent security issues with `target="_blank"` in links
    "react/no-unescaped-entities": "error", // Prevent invalid characters in JSX
    "react/jsx-boolean-value": ["error", "never"], // Omit `true` for boolean props
    "react/self-closing-comp": "error", // Enforce self-closing on JSX elements without children

    /* React Hooks rules */
    "react-hooks/rules-of-hooks": "error", // Enforce the rules of hooks
    "react-hooks/exhaustive-deps": "warn", // Warn on missing dependencies in useEffect

    /* Next.js specific rules */
    "@next/next/no-img-element": "off", // Allow using the native `img` element
    "@next/next/no-html-link-for-pages": ["error", "./pages"], // Ensure `Link` is used for internal navigation

    /* Best practices and code style */
    "curly": ["error", "all"], // Enforce consistent curly brace usage for control statements
    "eqeqeq": ["error", "always"], // Require `===` and `!==` instead of `==` and `!=`
    "no-console": "warn", // Allow console warnings, but not errors
    "no-debugger": "error", // Disallow usage of `debugger`
    "no-unused-vars": "warn", // Warn when variables are declared but not used
    "no-var": "error", // Enforce the use of `let` or `const` instead of `var`
    "prefer-const": "error", // Prefer `const` over `let` when variables are not reassigned
    "semi": ["error", "always"], // Enforce semicolons at the end of statements
    "quotes": ["error", "single", { "avoidEscape": true }], // Enforce single quotes, except when avoiding escape
    "no-multi-spaces": "error", // Disallow multiple spaces
    "object-curly-spacing": ["error", "always"], // Require consistent spacing inside braces
    "comma-dangle": ["error", "always-multiline"], // Enforce trailing commas in multiline statements
    "indent": ["error", 2], // Enforce 2-space indentation
    "jsx-quotes": ["error", "prefer-double"], // Use double quotes for JSX attributes

    /* Accessibility rules */
    "jsx-a11y/alt-text": "warn", // Ensure `alt` text is provided on images
    "jsx-a11y/anchor-is-valid": "warn", // Ensure anchors are valid
    "jsx-a11y/label-has-associated-control": "error", // Ensure form labels have controls
    "jsx-a11y/no-onchange": "warn", // Encourage using `onBlur` over `onChange` for accessibility

    /* Code quality and maintainability */
    "no-empty-function": "error", // Disallow empty functions
    "no-shadow": "error", // Disallow variable declarations from shadowing variables in outer scope
    "no-duplicate-imports": "error", // Disallow duplicate imports
    "no-multiple-empty-lines": ["error", { "max": 1 }], // Disallow multiple empty lines
    "spaced-comment": ["error", "always", { "exceptions": ["-", "+"] }], // Enforce space after comments
    "arrow-body-style": ["error", "as-needed"], // Enforce concise arrow function bodies where possible
    "prefer-template": "error", // Prefer template literals over string concatenation
    "no-nested-ternary": "error", // Disallow nested ternary expressions for readability
    "no-lonely-if": "error", // Disallow `else if` following `else` for readability
    "newline-before-return": "error" // Enforce a newline before return statements
  },
  "settings": {
    "react": {
      "version": "detect"
    }
  }
}
